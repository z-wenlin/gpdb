# GPDB_91_MERGE_FIXME: GPDB acquires ExclusiveLock for update and delete SQL
# statements.  This invalidates most of the isolation tests from upstream below.
# E.g. an UPDATE step executed by isolationtester never returns because another
# session run in the same permutation holds ExclusiveLock that blocks the step.
# GPDB_94_MERGE_FIXME: Since the introduction of Global Deadlock Detector, an
# UPDATE/DELETE no longer acquires ExclusiveLock. So we could perhaps enable
# some of these now. 
# A GUC gp_enable_global_deadlock_detector is introduced to control GDD.
# When GDD is enabled, update|delete on heap tables will lock the table in
# RowExclusiveLock mode. Otherwise, it locks the whole table in ExlusiveLock mode.
# By default, GDD is set distabled and most the cases are tested under this
# condition.
# Greenplum's logic for Select-Statement with locking clause (for update|no key update|share|key share)
# is different from upstream:
#   - For all kinds of select-statement with locking clause, Greenplum locks the entire table in ExclusiveLock
#   mode, and does not generate LockRows plannode in the plan.
#   - For very simple cases (defined below), Greenplum behaves just like Postgres:
#     1. Hold RowShareLock on the table
#     2. Generate LockRows plannode in the plan
#     3. Lock tuples during executing

# Simple cases should meet all the following conditions:
#   1. GDD(global deadlock detector) is enabled
#   2. Top level select statements with locking clause
#   3. FromList in the parse tree contains and only contains one rangeVar
#   4. No sublink and no subquery
#   5. No set operations (union, intersect, â€¦)

# GPDB_95_MERGE_FIXME: Tests insert-conflict-do-update-3,
# nowait, nowait-2, nowait-3, nowait-4, nowait-5, skip-locked, skip-locked-2,
# skip-locked-3, skip-locked-4, tuplelock-conflict, alter-table-2,
# alter-table-2, create-trigger. If GDD is enabled, it will then take
# RowExclusiveLock and the tests can probably be enabled back.
# Additionally, skip-locked-4 uses pg_advisory_lock() which only takes the lock
# on QD, but it needs to take it on QE segments as well.
# GPDB_95_MERGE_FIXME: insert-conflict-do-nothing, insert-conflict-do-update,
# and insert-conflict-do-update-2 fail because isolationtester does not include
# QEs when checking pg_locks. If we are able to add the QE backend pids of gang
# to this list then these tests can be enabled.  insert-conflict-do-update-2
# has additional issue where GPDB does not support creating unique indexes on
# mutated columns via lower().
#
# GPDB_12_MERGE_FIXME: tuplelock-upgrade-no-deadlock, freeze-the-dead
# don't pass in normal mode for GPDB as SELECT..FOR SHARE/UPDATE can
# block each other in gpdb if GDD does not open.
# insert-conflict-specconflict, In this case, three sessions using
# advisory lock to control INSERT...ON CONFLICT in a small critical
# region so that test txn will successful abort. GPDB lock managed in
# master node, it is hard to test this feature by the case.
#
#############################################################
#
# IMPORTANT: Isolation tests are run with gp_role=utility
# currently in GPDB. Refer isolation_init()
#
#############################################################

test: read-only-anomaly
#test: read-only-anomaly-2
#test: read-only-anomaly-3
#test: read-write-unique
#test: read-write-unique-2
#test: read-write-unique-3
#test: read-write-unique-4
#test: simple-write-skew
#test: receipt-report
#test: temporal-range-integrity
#test: project-manager
#test: classroom-scheduling
#test: total-cash
#test: referential-integrity
#test: ri-trigger
#test: partial-index
#test: two-ids
#test: multiple-row-versions
#test: index-only-scan
test: deadlock-simple
test: deadlock-hard
test: deadlock-soft
test: deadlock-soft-2
#test: fk-contention
#test: fk-deadlock
#test: fk-deadlock2
#test: fk-partitioned-1
#test: fk-partitioned-2
#test: eval-plan-qual
#test: lock-update-delete
#test: lock-update-traversal
test: inherit-temp
#test: insert-conflict-do-nothing
#test: insert-conflict-do-nothing-2
#test: insert-conflict-do-update
#test: insert-conflict-do-update-2
#test: insert-conflict-do-update-3
test: insert-conflict-toast
test: insert-conflict-specconflict
test: delete-abort-savept
#test: delete-abort-savept-2
#test: aborted-keyrevoke
#test: multixact-no-deadlock
#test: multixact-no-forget
#test: lock-committed-update
#test: lock-committed-keyupdate
test: update-locked-tuple
#test: reindex-concurrently
#test: propagate-lock-delete
#test: tuplelock-conflict
#test: tuplelock-update
#test: tuplelock-upgrade-no-deadlock
#test: freeze-the-dead
#test: nowait
#test: nowait-2
#test: nowait-3
#test: nowait-4
#test: nowait-5
#test: skip-locked
#test: skip-locked-2
#test: skip-locked-3
#test: skip-locked-4
test: drop-index-concurrently-1
#test: multiple-cic
test: alter-table-1
#test: alter-table-2
#test: alter-table-3
#test: alter-table-4
#test: create-trigger
test: sequence-ddl
test: async-notify
# vacuum-reltuples uses a cursor to keep page pinned, but in GPDB that doesn't
# keep it pinned.
#test: vacuum-reltuples
test: timeouts
test: vacuum-concurrent-drop
test: vacuum-conflict
test: vacuum-skip-locked
#test: predicate-hash
#test: predicate-gist
#test: predicate-gin

test: partition-drop-index-locking

# GPDB_12_MERGE_FIXME: disabled test partition-key-update-1. Need to
# investigate why failing in utility mode single node.
#test: partition-key-update-1
test: partition-key-update-2
test: partition-key-update-3
test: partition-key-update-4
test: plpgsql-toast
test: truncate-conflict
#test: serializable-parallel
#test: serializable-parallel-2

#test: prepared-transactions

# GPDB-specific tests
test: heap-repeatable-read-vacuum-freeze
test: heap-repeatable-read-vacuum
test: ao-repeatable-read-vacuum

test: ao-insert-eof create_index_hot udf-insert-deadlock heap-repeatable-read ao-repeatable-read
